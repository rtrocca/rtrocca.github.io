{"version":3,"sources":["components/SearchBox.tsx","../../src/Loading.tsx","../../src/LinkButton.tsx","../../src/ShowCard.tsx","components/ShowList.tsx","App.tsx","../../src/search-show.ts","serviceWorker.ts","index.tsx"],"names":["SearchBox","props","useState","searchString","setSearchString","className","onSubmit","e","preventDefault","onSearch","style","width","disabled","type","value","onChange","evt","target","placeholder","aria-label","ariaLabel","aria-describedby","id","onClick","icon","faSearch","LoadingUI","display","alignItems","justifyContent","flexDirection","marginTop","src","alt","LinkButton","href","rel","faExternalLinkAlt","ShowCard","image","name","backgroundColor","dangerouslySetInnerHTML","__html","summary","label","officialSite","url","ShowList","isLoading","shows","map","show","key","App","setShows","setIsLoading","useEffect","params","fetch","response","console","ok","result","showData","searchShow","then","finally","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb30f4f8.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\ninterface ISearchBoxProps {\n  placeholder: string;\n  ariaLabel: string;\n  disabled: boolean;\n  onSearch: (showName: string) => void;\n}\n\nexport const SearchBox: React.FC<ISearchBoxProps> = (props: ISearchBoxProps) => {\n  const [searchString, setSearchString] = useState('');\n\n  return (\n        <form\n          className=\"form-searchbox\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            props.onSearch(searchString);\n          }}\n        > \n          <div className=\"input-group mb-3\">\n            <input\n              style={{width: '600px'}}\n              disabled={props.disabled}\n              type=\"text\"\n              value={searchString}\n              onChange={(evt) => setSearchString(evt.target.value)}\n              className=\"form-control\"\n              placeholder={props.placeholder}\n              aria-label= {props.ariaLabel}\n              aria-describedby=\"button-addon2\"\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                disabled={props.disabled}\n                id=\"button-addon2\"\n                onClick={(e) => { props.onSearch(searchString)}}\n              >\n                <FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>\n              </button>\n            </div>\n          </div>\n        </form>\n\n  );\n}\n\n","import React from 'react';\nimport img from './Loading.gif';\nexport const LoadingUI: React.FC = () => {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                width: \"100%\",\n                flexDirection: \"column\",\n                marginTop: \"2em\"\n            }}\n        >\n            <img src={img} alt=\"Loading spinner\"/>\n            <span style={{ \n                marginTop: \"1em\"\n            }}\n            >\n                Loading...\n            </span>\n        </div>\n    );\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'\n\ninterface ILinkButtonProps {\n    label: string;\n    href: string;\n}\n\nexport const LinkButton: React.FC<ILinkButtonProps> = (props) => {\n    return (\n        <a\n            href={props.href}\n            className=\"btn btn-info\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\" \n        > \n            <FontAwesomeIcon icon={faExternalLinkAlt}/>&nbsp;{props.label}</a>\n    );\n}","import React from 'react';\nimport { IShow } from '@rtrocca/search-show';\nimport { LinkButton } from '@rtrocca/link-button';\nimport './ShowCard.scss';\n\nexport const ShowCard: React.FC<{show: IShow}> = (props) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"row no-gutters\">\n                { \n                    props.show.image ?\n                        <div className=\"col-md-3 col-sm-3\">\n                            <img\n                                src={props.show.image}\n                                className=\"card-img show-cover\"\n                                alt={`${props.show.name}`}\n                            />\n                        </div> :\n                        <div className=\"col-md-3\" style={{backgroundColor: \"#E0E0EA\"}}>\n                        </div>\n                }\n                <div className=\"col-md-9 col-sm-9\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{props.show.name}</h5>\n                        <p className=\"card-text\" dangerouslySetInnerHTML={{__html: props.show.summary}}></p>\n                        <div className=\"card-buttons\">\n                            { props.show.officialSite && <LinkButton label=\"Official Site\" href={props.show.officialSite}/>}\n                            { props.show.url && <LinkButton label=\"More Info...\" href={props.show.url}/>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { IShow } from '@rtrocca/search-show';\nimport { LoadingUI } from '@rtrocca/loading-ui';\nimport { ShowCard } from '@rtrocca/show-card';\nimport \"@rtrocca/show-card/dist/show-card.css\";\ninterface IShowListProps {\n    shows: IShow[];\n    isLoading: boolean;\n}\n\nexport const ShowList: React.FC<IShowListProps> = (props: IShowListProps) => {\n    if (props.isLoading) {\n        return <LoadingUI/>\n    }\n    return (\n        <div>\n            {props.shows.map( (show: IShow) => <ShowCard key={show.id} show={show} />)}\n        </div>\n    );\n}","import React, {useState, useEffect} from 'react';\nimport { searchShow, IShow } from '@rtrocca/search-show';\nimport { SearchBox } from './components/SearchBox';\nimport { ShowList } from './components/ShowList';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [shows, setShows] = useState([] as IShow[]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchString, setSearchString] = useState('');\n\n  useEffect( () => {\n    if (searchString) {\n      setIsLoading(true);\n      searchShow(searchString).then( (result) => {\n        if (result) {\n          setShows(result);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [searchString]);\n\n  return (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"h4\">TV Show Search</h1>\n            <SearchBox \n              onSearch={setSearchString}\n              disabled={isLoading}\n              placeholder=\"Enter TV Show's Name\"\n              ariaLabel=\"Enter TV Show's Name\"\n            >\n            </SearchBox>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <ShowList shows={shows} isLoading={isLoading}/>\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","interface ILink {\n    href: string;\n}\n\ninterface IShowData {\n    score: number;\n    show: {\n        id: number;\n        url: string;\n        name: string;\n        type: string;\n        language: string;\n        genres: string[];\n        status: string; // 'Ended' | \n        runtime: number;\n        premiered: string;\n        officialSite: string;\n        schedule: {\n            time: string;\n            days: string[];\n        };\n        rating: {\n            average: number\n        };\n        weight: number;\n        network: {\n            id: number;\n            name: string;\n            country: {\n                name: string;\n                code: string;\n                timezone: string;\n            };\n        };\n        webChannel: any;\n        externals: {\n            tvrage: number;\n            thetvdb: number;\n            imdb: string;\n        };\n        image: {\n            medium: string;\n            original: string;\n        };\n        summary: string;\n        updated: number;\n        _links: {\n            self: ILink;\n            previousepisode: ILink;\n        };\n    }\n}\n\nexport interface IShow {\n    id: number;\n    name: string;\n    url: string;\n    officialSite: string;\n    image?: string;\n    summary: string;\n}\n\nexport async function searchShow(showName: string): Promise<IShow[]|null> {\n    // http://api.tvmaze.com/search/shows?q=girls\n    const params = new URLSearchParams();\n    params.append('q', showName);\n\n    const response = await fetch(`https://api.tvmaze.com/search/shows?${params.toString()}`);\n    if (response.ok) {\n        const result = await response.json() as IShowData[];\n        return  result.map( (showData) => {\n            return {\n                id: showData.show.id,\n                name: showData.show.name,\n                url: showData.show.url,\n                officialSite: showData.show.officialSite,\n                image: showData.show.image ? showData.show.image.medium : undefined,\n                summary: showData.show.summary\n            }\n        });\n    }\n    // there was some issue\n    console.log('An error occurred', response.status, response.statusText);\n    return null;\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}